{"version":3,"sources":["constants.js","App.js","reportWebVitals.js","index.js"],"names":["exports","apiKey","App","useState","value","setValue","temp","city","climate","visibility","wind","weather","setWeather","handleChange","event","a","target","handleSubmit","callBackend","preventDefault","url","config","headers","data","axios","post","res","main","name","typeOfClimate","status","Error","message","className","onSubmit","type","onChange","speed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kFAAAA,EAAQC,OAAS,oC,2MCuFFC,EAjFI,WAEf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,CACnCG,KAAM,KACNC,KAAM,KACNC,QAAS,KACTC,WAAY,KACZC,KAAM,OALV,mBAAOC,EAAP,KAAgBC,EAAhB,KAQMC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACjBV,EAASS,EAAME,OAAOZ,OADL,2CAAH,sDAIZa,EAAY,uCAAG,WAAOH,GAAP,SAAAC,EAAA,sDACjBG,IACAJ,EAAMK,iBAFW,2CAAH,sDAKZD,EAAW,uCAAG,gDAAAH,EAAA,sEAGRK,EAHQ,oDAG4ChB,EAH5C,+BAG0EH,UAChFoB,EAAS,CACXC,QAAU,CACN,OAAU,mBACV,eAAgB,qBAGlBC,EAAO,CACTH,IAAKA,GAXG,SAcMI,IAAMC,KAAK,mBAAoBF,EAAMF,GAd3C,UAcNK,EAdM,SAyBRA,EAAIH,KATMjB,EAhBF,EAgBJqB,KACJC,EAjBQ,EAiBRA,KAjBQ,gBAkBRjB,QAlBQ,GAoBMkB,EApBN,KAoBAF,KAGRlB,EAvBQ,EAuBRA,WACAC,EAxBQ,EAwBRA,KAGJE,EAAW,2BACJD,GADG,IAENJ,KAAMqB,EACNtB,KAAMA,EAAKA,KACXE,QAASqB,EACTpB,WAAYA,EACZC,KAAMA,KAES,MAAfgB,EAAII,OAnCI,uBAoCJC,MAAML,EAAIM,SApCN,0EAwCND,MAAM,KAAEC,SAxCF,0DAAH,qDA2CjB,OACI,mCACA,qBAAKC,UAAU,MAAf,SACI,sBAAKA,UAAU,aAAf,UACI,sBAAMC,SAAW,SAACpB,GAAD,OAAWG,EAAaH,IAAzC,SACI,wDAEI,uBAAOmB,UAAU,YAAYE,KAAK,OAAO/B,MAAQA,EAAQgC,SAAWvB,IACpE,uBAAOoB,UAAU,aAAaE,KAAK,SAAS/B,MAAM,gBAGxDO,EAAQJ,MAAQ,yDAA4BI,EAAQL,KAApC,iCAAmEK,EAAQJ,KAA3E,uCACNI,EAAQH,QADF,gBACmBG,EAAQF,WAD3B,sCACqEE,EAAQD,KAAK2B,MADlF,mBCpEnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b4952ca9.chunk.js","sourcesContent":["exports.apiKey = '3ef26b044aa8de5388fb44e903a7b2cc'","import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { apiKey } from './constants';\n\nexport const App = () => {\n    // set hooks\n    const [value, setValue] = useState('');\n    const [weather, setWeather] = useState({\n        temp: null,\n        city: null,\n        climate: null,\n        visibility: null,\n        wind: null,\n    });\n    // Handle change in input box \n    const handleChange = async (event) => {\n        setValue(event.target.value);\n    };\n    // Handle submit button action\n    const handleSubmit = async (event) => {\n        callBackend();\n        event.preventDefault();\n    };\n\n    const callBackend = async () => {\n        try {\n            // Set post options\n            let url = `api.openweathermap.org/data/2.5/weather?q=${ value }&units=metric&appid=${ apiKey }`\n            const config = {\n                headers : {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            };\n            const data = {\n                url: url,\n            };\n            // axios call\n            const res = await axios.post('/express_backend', data, config);\n            // Destructure response object to set hooks values.\n            const { main: temp, \n                name, \n                weather: [\n                    {\n                        main: typeOfClimate,\n                    }\n                ],\n                visibility,\n                wind,\n            } = res.data;\n            // set weather hook\n            setWeather({\n                ...weather,\n                city: name,\n                temp: temp.temp,\n                climate: typeOfClimate,\n                visibility: visibility,\n                wind: wind\n            });\n            if (res.status !== 200) {\n              throw Error(res.message) \n            }\n            return\n        } catch (e) {\n            throw Error(e.message) \n        }\n    };\n    return (\n        <>\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <form onSubmit={ (event) => handleSubmit(event) }>\n                    <div>\n                    Insert the city here:\n                        <input className=\"App-input\" type=\"text\" value={ value } onChange={ handleChange } />\n                        <input className=\"App-button\" type=\"submit\" value=\"Submit\" />\n                    </div>\n                </form>\n                { weather.city && <p>{ `The temperature is ${ weather.temp } Celsius in the city: ${ weather.city },\n                    with ${ weather.climate } and ${ weather.visibility } m. of visibility and wind ${ weather.wind.speed } km/h` }</p> }\n            </div>\n        </div>\n        </>\n    );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}